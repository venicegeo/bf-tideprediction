#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def nodejs = tool 'NodeJS_6'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def fortifyBuild = "bf-tideprediction-${env.BUILD_NUMBER}"
  def sonar = tool 'SonarQube Runner 2.8'
  def projectId = "venicegeo:beachfront:bf-tideprediction"
  
  stage("Config") {
    // clone the configuration repository and copy the current configuration
    def configDir = "${root}/configuration"
    def configFile = "${root}/config.json"
    dir(configDir) {
      git url: "${env.CONFIGURATION_URL}", credentialsId: "${env.CONFIGURATION_CREDS}"
      sh "mv ${configDir}/${ENVIRONMENT}-config.json ${configFile}"
      deleteDir()
    }
    // read the current configuration
    def configJson = readJSON file: "${configFile}"
    for (param in configJson.credparams + configJson.jobparams) { 
      env."${param.name}" = (param.type == "booleanParam") ? "${param.defaultvalue}".toBoolean() : "${param.defaultvalue}"
    }
  }

  stage('Setup') {
    deleteDir()
    if(env.USE_GIT_CREDS.toBoolean()) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_READ_ONLY_CREDS}", usernameVariable: "USER", passwordVariable: "PASS"]]) {
      sh 'sed -i "s*CONDA_CHANNEL*`echo "${CONDA_CHANNEL_URL}" | sed "s#://#://${USER}:${PASS}@#g"`*g" environment.yml'
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  appvers = appvers.trim()
  def appName = "bf-tideprediction-${appvers}"

  stage('Archive') {
    // Build the zipfile which contains the application bits that are pushed to PCF. This includes the historical data.
    sh "./scripts/extract-historical-data.sh"
    
    // Build the tarball for the artifact which contains the application zipfile and the manifest, which is what will reside in Nexus
    def archiveName = "bf-tideprediction.tar.gz"
    sh """tar -cvzf ${archiveName} bftideprediction manifest.jenkins.yml environment.yml"""
    // Push to Nexus
    def getDependencyStatus = sh(script: """mvn --quiet --settings ~/.m2/settings.xml dependency:get -Dmaven.repo.local="${root}/.m2/repository" -DrepositoryId=nexus -DartifactId=bf-tideprediction -Dversion=${appvers} -DgroupId="org.venice.beachfront" -Dpackaging=tar.gz -DremoteRepositories="nexus::default::${env.ARTIFACT_STORAGE_DEPLOY_URL}" >> /dev/null 2>&1""", returnStatus: true)
    if(getDependencyStatus == 0) {
      echo "Artifact version ${appvers} exists in Nexus, nothing to do"
    } else {
      sh """
        mvn -X --settings ~/.m2/settings.xml deploy:deploy-file -Dfile=${archiveName} -DrepositoryId=nexus	-Durl="${env.ARTIFACT_STORAGE_DEPLOY_URL}" -DgroupId="org.venice.beachfront" -DgeneratePom=false -Dpackaging=tar.gz -Dmaven.repo.local="${root}/.m2/repository" -DartifactId=bf-tideprediction -Dversion=${appvers}
      """
    }
  }

  if(!env.SKIP_SCANS.toBoolean()) {
    stage('Scans') {
      withCredentials([[$class: "StringBinding", credentialsId: "${env.THREADFIX_API_KEY}", variable: "THREADFIX_KEY"]]) {
        // Dependency Checker
        def depHome = tool 'owasp_dependency_check'
        withEnv(["PATH+=${depHome}/bin"]) {
          sh 'dependency-check.sh --project "bf-tideprediction" --scan "." --format "XML" --enableExperimental --disableBundleAudit'
          sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@dependency-check-report.xml ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
        // Fortify
        sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${fortifyBuild} ./{*.py,**/*.py}"
        sh "/opt/hp_fortify_sca/bin/sourceanalyzer -b ${fortifyBuild}  -scan -Xmx8G -f fortifyResults-${fortifyBuild}.fpr"
        sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@fortifyResults-${fortifyBuild}.fpr ${env.THREADFIX_URL}/rest/applications/${env.THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
      }

      /*
    withCredentials([string(credentialsId: "${env.SONAR_TOKEN}", variable: 'USERNAME')]) {
      withEnv(["HOME=${root}"]) {
      def projectId = "venicegeo:beachfront:bf-tideprediction"
      sh "${mvn}/bin/mvn sonar:sonar -Dmaven.repo.local=${root} -Dsonar.host.url=${env.SONAR_URL} -Dsonar.projectKey=${projectId} -Dsonar.projectName=${projectId} -Dsonar.login=${USERNAME}"// -P nga"
      }
    }
      withCredentials([string(credentialsId: "${env.SONAR_TOKEN}", variable: 'USERNAME')]) {
        withEnv(["HOME=${root}"]) {
          sh """pwd && ls
        ${sonar}/bin/sonar-scanner \
            -Dsonar.python.coverage.reportPath=report/coverage/coverage.xml \
            -Dsonar.sources=${root}/bftideprediction \
            -Dsonar.tests=${root}/test \
            -Dsonar.host.url=${env.SONAR_URL} \
            -Dsonar.projectKey=${projectId} \
            -Dsonar.projectName=${projectId} \
            -Dsonar.language=py \
            -Dsonar.projectBaseDir=${root} \
            -Dsonar.projectVersion=${appvers} \
            -Dsonar.login=${USERNAME}
          """
        }
      }*/
    }

    stage("Security Scan Pass/Fail") {
      // Query threadfix and block if any highs/crits are found
      /*sh "mkdir -p sspf-pkg"
    dir("./sspf-pkg") {
      withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
      sh "curl -L ${env.SSPF_PACKAGE} -o sspf.zip"
      sh "unzip sspf.zip"
      dir("./sspf-master/sspf") {
        sh "/bin/curl --fail --silent ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}?apiKey=${THREADFIX_KEY} | ./sspf.py"
      }
      }
    }*/
    }
  }

  stage ('Int Deploy') {
    if(!fileExists('.cf')) {
      sh "mkdir -p .cf"
    }
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
        sh "cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.PYTHON_BUILDPACK_NAME} -d ${env.PHASE_ONE_PCF_DOMAIN} --no-start"
        try {
          sh "cf set-env ${appName} SPACE ${env.PHASE_ONE_PCF_SPACE}"
          sh "cf set-env ${appName} DOMAIN ${env.PHASE_ONE_PCF_DOMAIN}"
          if(env.USE_GIT_CREDS.toBoolean()) {
            sh "cf set-env ${appName} REQUESTS_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt"
          }
          sh "cf start ${appName}"
        } catch (Exception e) {
          //sh "cf logs --recent ${appName}"
          sh "cf delete ${appName} -f -r"
          error("Error during application start. Deleting ${appName} and failing the build.")
        }
      }
    }
    if(!env.SKIP_SCANS.toBoolean()) {
      withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
        sh "mkdir -p ${root}/zap-out"
        sh """${zapHome}/zap.sh -cmd \
          -quickout ${root}/zap-out/zap.xml \
          -quickurl https://${appName}.${env.PHASE_ONE_PCF_DOMAIN} \
        """
        sh "cat ${root}/zap-out/zap.xml"
        sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
      }
    }
    
    withEnv(['CF_HOME=.cf']) {
      withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
        sh "cf api ${env.PCF_API_ENDPOINT}"
        sh "cf auth ${CFUSER} ${CFPASS}"
        sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_ONE_PCF_SPACE}"
        
        // Define routes
        def legacyAppNames = sh(script: "cf routes | grep \"bf-tideprediction \" | awk '{print \$4}'", returnStdout: true)
        sh "cf map-route ${appName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-tideprediction"
        sh "cf map-route ${appName} apps.internal --hostname bf-tideprediction-${env.PHASE_ONE_PCF_SPACE}"

        // Define policies
        def iaBroker = sh(script: "cf routes | grep \"bf-ia-broker\" | awk '{print \$4}'", returnStdout: true).trim()
        echo "${iaBroker}"
        sh "cf add-network-policy ${iaBroker} --destination-app ${appName}"
        
        // Remove Legacy applications
        for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
          def legacyAppName = legacyApp.toString().trim()
          if (legacyAppName != appName) {
            sh "cf unmap-route ${legacyAppName} ${env.PHASE_ONE_PCF_DOMAIN} --hostname bf-tideprediction"
            sh "cf unmap-route ${legacyAppName} apps.internal --hostname bf-tideprediction-${env.PHASE_ONE_PCF_SPACE}"
            sh "cf delete -f ${legacyAppName} -r"
          }
        }
      }
    }
  }

  if (!env.SKIP_INTEGRATION_TESTS.toBoolean()) {
    stage('Phase One Integration Tests') {
      if(!fileExists("integration-tests")) {
        sh "mkdir -p integration-tests"
      }
      // Clone Test Repository
      withCredentials([file(credentialsId: "${POSTMAN_SECRET_FILE}", variable: 'POSTMAN_FILE')]) {
        withEnv(["PATH+=${root}/integration-tests/node_modules/newman/bin:${nodejs}/bin", "PCF_SPACE=${env.PHASE_ONE_PCF_SPACE}", "HOME=${WORKSPACE}"]) {
          dir ("integration-tests") {
            if(env.INTEGRATION_GITLAB_CREDS) {
              git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}", credentialsId: "${env.INTEGRATION_GITLAB_CREDS}"
            } else {
              git url: "${env.INTEGRATION_GIT_URL}", branch: "${env.INTEGRATION_GIT_BRANCH}"
            }
            sh "npm install newman@3"
            sh "/bin/bash ci/beachfront.sh"
          }
        }
      }
    }
  }

  if(env.DEPLOY_PHASE_TWO.toBoolean()) {
    stage ('Stage Deploy') {
      if(!fileExists('.cf')) {
        sh "mkdir -p .cf"
      }
      withEnv(['CF_HOME=.cf']) {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
          sh "cf api ${env.PCF_API_ENDPOINT}"
          sh "cf auth ${CFUSER} ${CFPASS}"
          sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
          sh "cf push ${appName} -f manifest.jenkins.yml --hostname ${appName} -b ${env.PYTHON_BUILDPACK_NAME} -d ${env.PHASE_TWO_PCF_DOMAIN} --no-start"
          try {
            sh "cf set-env ${appName} SPACE ${env.PHASE_TWO_PCF_SPACE}"
            sh "cf set-env ${appName} DOMAIN ${env.PHASE_TWO_PCF_DOMAIN}"
            if(env.USE_GIT_CREDS.toBoolean()) {
              sh "cf set-env ${appName} REQUESTS_CA_BUNDLE /etc/ssl/certs/ca-certificates.crt"
            }
            sh "cf start ${appName}"
          } catch (Exception e) {
            //sh "cf logs --recent ${appName}"
            sh "cf delete ${appName} -f -r"
            error("Error during application start. Deleting ${appName} and failing the build.")
          }
        }
      }
      if(!env.SKIP_SCANS.toBoolean()) {
        withCredentials([[$class: 'StringBinding', credentialsId: "${env.THREADFIX_API_KEY}", variable: 'THREADFIX_KEY']]) {
          sh "mkdir -p ${root}/zap-out"
          sh """${zapHome}/zap.sh -cmd \
            -quickout ${root}/zap-out/zap.xml \
            -quickurl https://${appName}.${env.PHASE_TWO_PCF_DOMAIN} \
          """
          sh "cat ${root}/zap-out/zap.xml"
          sh "/bin/curl -v --insecure -H 'Accept: application/json' -X POST --form file=@${root}/zap-out/zap.xml ${env.THREADFIX_URL}/rest/applications/${THREADFIX_ID}/upload?apiKey=${THREADFIX_KEY}"
        }
      }
      withEnv(['CF_HOME=.cf']) {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.PCF_CREDS}", usernameVariable: 'CFUSER', passwordVariable: 'CFPASS']]) {
          sh "cf api ${env.PCF_API_ENDPOINT}"
          sh "cf auth ${CFUSER} ${CFPASS}"
          sh "cf target -o ${env.PCF_ORG} -s ${env.PHASE_TWO_PCF_SPACE}"
          
          // Define routes
          def legacyAppNames = sh(script: "cf routes | grep \"bf-tideprediction \" | awk '{print \$4}'", returnStdout: true)
          sh "cf map-route ${appName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-tideprediction"
          sh "cf map-route ${appName} apps.internal --hostname bf-tideprediction-${env.PHASE_TWO_PCF_SPACE}"
          
          // Define policies
          def iaBroker = sh(script: "cf routes | grep \"bf-ia-broker\" | awk '{print \$4}'", returnStdout: true)
          sh "cf add-network-policy ${iaBroker} --destination-app ${appName}"
          
          // Remove Legacy applications
          for (Object legacyApp : legacyAppNames.trim().tokenize(',')) {
            def legacyAppName = legacyApp.toString().trim()
            if (legacyAppName != appName) {
              sh "cf unmap-route ${legacyAppName} ${env.PHASE_TWO_PCF_DOMAIN} --hostname bf-tideprediction"
              sh "cf unmap-route ${legacyAppName} apps.internal --hostname bf-tideprediction-${env.PHASE_TWO_PCF_SPACE}"
              sh "cf delete -f ${legacyAppName} -r"
            }
          }
        }
      }
    }
    
  }
}

